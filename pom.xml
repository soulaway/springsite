<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.github.soulaway</groupId>
	<artifactId>springsite</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>springsite</name>
	<description>springsite</description>
	<properties>
		<spring.version>4.2.0.RELEASE</spring.version>
		<spring-security.version>4.0.2.RELEASE</spring-security.version>
		<spring-data-jpa.version>1.8.2.RELEASE</spring-data-jpa.version>
		<hibernate.version>4.3.11.Final</hibernate.version>
		<hibernate-validator.version>5.2.1.Final</hibernate-validator.version>
		<mysql-connector.version>5.1.36</mysql-connector.version>
		<commons-dbcp.version>1.4</commons-dbcp.version>
		<jstl.version>1.2</jstl.version>
		<junit.version>4.11</junit.version>
		<logback.version>1.1.3</logback.version>
		<maven.compiler.source>1.8</maven.compiler.source>
		<maven.compiler.target>1.8</maven.compiler.target>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-web</artifactId>
			<version>${spring.version}</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>${spring.version}</version>
		</dependency>
		
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <version>3.0.1</version>
		</dependency>	
			
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
			<version>${jstl.version}</version>
		</dependency>
			
		<!-- Security web -->
		
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-web</artifactId>
			<version>${spring-security.version}</version>
		</dependency>

		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-config</artifactId>
			<version>${spring-security.version}</version>
		</dependency>
		
		<!-- Persistence -->
		
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-validator</artifactId>
			<version>${hibernate-validator.version}</version>
		</dependency>

		<dependency>
			<groupId>org.springframework.data</groupId>
			<artifactId>spring-data-jpa</artifactId>
			<version>${spring-data-jpa.version}</version>
		</dependency>

		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-entitymanager</artifactId>
			<version>${hibernate.version}</version>
		</dependency>

		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>${mysql-connector.version}</version>
		</dependency>

		<dependency>
			<groupId>commons-dbcp</groupId>
			<artifactId>commons-dbcp</artifactId>
			<version>${commons-dbcp.version}</version>
		</dependency>

		<!-- Logging -->
		
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>${logback.version}</version>
		</dependency>
		
		<!-- Testing -->
		
		<dependency>
		    <groupId>junit</groupId>
		    <artifactId>junit</artifactId>
		    <version>4.11</version>
		    <scope>test</scope>
		</dependency>
		<dependency>
		    <groupId>org.mockito</groupId>
		    <artifactId>mockito-core</artifactId>
		    <version>1.9.5</version>
		    <scope>test</scope>
		</dependency>
		<dependency>
		    <groupId>org.springframework</groupId>
		    <artifactId>spring-test</artifactId>
		    <version>3.2.3.RELEASE</version>
		    <scope>test</scope>
		</dependency>
		
	</dependencies>
	<build>
		<plugins>
            <plugin>
                <artifactId>maven-war-plugin</artifactId>
                <version>2.4</version>
                <configuration>
                    <failOnMissingWebXml>false</failOnMissingWebXml>
                </configuration>
			</plugin>			
			
			<plugin>
				<groupId>org.eclipse.jetty</groupId>
				<artifactId>jetty-maven-plugin</artifactId>
				<version>9.2.11.v20150529</version>
				<configuration>
					<scanIntervalSeconds>10</scanIntervalSeconds>
					<webApp>
						<contextPath>/</contextPath>
					</webApp>
				</configuration>
			</plugin>
<!-- 			
			<plugin>
				https://mvnrepository.com/artifact/io.fabric8/docker-maven-plugin
				<groupId>io.fabric8</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>0.16.7</version>
	            <configuration>
	              <logDate>default</logDate>
	              <autoPull>true</autoPull>
	              <images>
	                Using image provided by mysql vendors
	                <image>
	                  <alias>db</alias>
	                  <name>mysql/mysql-server:5.6</name>
	                  <run>
	                  	<ports>
	                      <port>3306</port>
	                    </ports>
	                    <wait>
	                      <log>database system is ready to accept connections</log>
	                      <time>20000</time>
	                    </wait>
	                    <log>
	                      <prefix>DB</prefix>
	                      <color>yellow</color>
	                    </log>
	                  </run>
	                </image>
	
	                Image holding the artifact of this build
	                <image>
	                  Alias name which can used for linking containers during runtime
	                  <alias>service</alias>
	                  <name>${project.artifactId}:${project.version}</name>
	
	                  .......................................
	                  Build configuration for creating images
	                  .......................................
	                  <build>
	                    <from>maven:alpine</from>
	                    Assembly descriptor holds the reference to the created artifact
	                    <assembly>
	                      Normally, one would only use 'assembly.xml' if we could put the assembly descriptor
	                           into src/main/docker But this confuses the alexec plugin, so we put it into another
	                           directory and use an absolute path
	                     		<descriptor>${basedir}/src/main/mvn-assembly/assembly.xml</descriptor>
	                    </assembly>
	                    Expose ports
	                    <ports>
	                      <port>8080</port>
	                    </ports>
	                    Default command for the build image
	                    <cmd>mvn clean install jetty:run</cmd>
	                  </build>
	
	                  ...............................................................
	                  Runtime configuration for starting/stopping/linking containers
	                  ...............................................................
	                  <run>
	                    Assign dynamically mapped ports to maven variables (which can be reused in integration tests)
	                    <ports>
	                      <port>tomcat.port:8080</port>
	                    </ports>
	                    <wait>
	                      Check for this URL to return a 200 return code ....
	                      <url>http://${docker.host.address}:${tomcat.port}/access</url>
	                      ... but at max 10 seconds
	                      <time>10000</time>
	                    </wait>
	                    <links>
	                      Links can be referenced via alias (db) or name (postgres:9). If no link-alias (second "db")
	                           is given it takes the first part (first "db") as link alias. So, <link>db</link> would be
	                           enough here
	                      <link>db:db</link>
	                    </links>
	                    <log>
	                      <prefix>TC</prefix>
	                      <color>cyan</color>
	                    </log>
	                  </run>
	                </image>
	              </images>
	            </configuration>
	
	            Hooking into the lifecycle
	            <executions>
	              <execution>
	                <id>start</id>
	                <phase>pre-integration-test</phase>
	                <goals>
	                  <goal>build</goal>
	                  <goal>start</goal>
	                </goals>
	              </execution>
	              <execution>
	                <id>stop</id>
	                <phase>post-integration-test</phase>
	                <goals>
	                  <goal>stop</goal>
	                </goals>
	              </execution>
	            </executions>
			</plugin> -->
			
			
		</plugins>

	</build>
</project>
